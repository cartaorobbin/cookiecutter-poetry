name: release-main

on:
  release:
    types: [published]
    branches: [main]

jobs:
  {% if cookiecutter.publish_to != "none" %}
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Set up the environment
        uses: ./.github/actions/setup-poetry-env

      - name: Export tag
        id: vars
        run: {% raw %}echo tag=${GITHUB_REF#refs/*/} >> $GITHUB_OUTPUT{% endraw %}

        {% if cookiecutter.publish_to == "codeartifact" -%}
        {%- raw -%}
        - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ needs.prepare.outputs.aws_account_id }}:role/github
          aws-region: us-east-1

      - name: Retrieve CodeArtifact token
        id: codeartifact-token
        run: echo "TOKEN=$(aws codeartifact get-authorization-token --domain <YOUR_DOMAIN_NAME> --domain-owner <YOUR_DOMAIN_OWNER> --query authorizationToken --output text)" >> $GITHUB_ENV
      
      - name: Retrieve CodeArtifact repository URL
        id: codeartifact-url
        run: echo "REPOSITORY_URL=$(aws codeartifact get-repository-endpoint --domain <YOUR_DOMAIN_NAME> --domain-owner <YOUR_DOMAIN_OWNER> --repository <YOUR_REPOSITORY_NAME> --format pypi --query repositoryEndpoint --output text)" >> $GITHUB_ENV
        {%- endraw -%}
        {% endif %}
        
        - name: Build and publish
        run: |
          source .venv/bin/activate
          poetry version $RELEASE_VERSION
          make build-and-publish
        env: 
          {% if cookiecutter.publish_to == "pypi" -%}
          {%- raw -%}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
          {%- endraw -%}
          {%- elif cookiecutter.publish_to == "artifactory" -%}
          {%- raw -%}
          ARTIFACTORY_URL: ${{ secrets.ARTIFACTORY_URL }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
          {%- endraw -%}
          {%- elif cookiecutter.publish_to == "private_pypi" -%}
          {%- raw -%}
          PRIVATE_PYPI_USERNAME: ${{ secrets.PRIVATE_PYPI_USERNAME }}
          PRIVATE_PYPI_PASSWORD: ${{ secrets.PRIVATE_PYPI_PASSWORD }}
          PRIVATE_PYPI_URL: ${{ secrets.PRIVATE_PYPI_URL }}
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
          {%- endraw -%}
          {%- elif cookiecutter.publish_to == "codeartifact" -%}
          {%- raw -%}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
          ROBBIN_PYPI_USERNAME: ${{ secrets.ROBBIN_PYPI_USERNAME }}
          ROBBIN_PYPI_PASSWORD: ${{ secrets.ROBBIN_PYPI_PASSWORD }}
          {%- endraw -%}
          {%- endif %}
  {% endif %}
  {%- if cookiecutter.mkdocs == "y" %}
  deploy-docs:
    {%- if cookiecutter.publish_to != "none" %}
    needs: publish
    {%- endif %}
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Set up the environment
        uses: ./.github/actions/setup-poetry-env

      - name: Deploy documentation
        run: poetry run mkdocs gh-deploy --force
  {% endif %}